pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'dockerfile'
        DOCKER_TAG = 'latest' // or use a dynamic tag like "${GIT_COMMIT}"
        FRONTEND_KEY = credentials('frontend-key')
        AWS_FRONTEND = 'ec2-user@98.85.146.55'
        
        BASTION_HOST = '54.164.238.221'
        BASTION_USER = 'ec2-user'  // Adjust if different for the bastion host
        BASTION_PRIVATE_KEY = credentials('bastion-private-key')  // Store the bastion private key in Jenkins Credentials Manager
    }

    tools {
        nodejs "test-node"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/TimoHubner444/test.git'
            }
        }

         stage('Test SSH Connection to Bastion') {
            steps {
                withCredentials([file(credentialsId: 'frontend-key', variable: 'FRONTEND_KEY')]) {
                    script {
                        // Test SSH connection to the Bastion Host
                        sh """
                            # Test SSH connection to the Bastion Host
                            ssh -o StrictHostKeyChecking=no -i \${AWS_FRONTEND} 'echo "SSH connection successful to frontend"'
                        """
                    }
                }
            }
        }

       

        stage('Build Docker Image and run') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        // Build Docker image
                        sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} -f frontend/Dockerfile.test ."
        
                        // Optionally run the container to ensure it works
                        sh "docker run --rm ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    }
                }
            }
        }

        


        stage('Install Dependencies') {
            steps {
                dir('frontend') {
                    sh 'npm install -g @angular/cli@17'
                    sh 'npm install'
                    sh 'npm install karma --save-dev'
                }
            }
        }

        stage('Build') {
            steps {
                dir('frontend') {
                    sh 'ng build --prod'
                }
            }
        }
       
        stage('Test SSH Connection to Bastion') {
            steps {
                withCredentials([file(credentialsId: 'bastion-private-key', variable: 'BASTION_PRIVATE_KEY')]) {
                    script {
                        // Test SSH connection to the Bastion Host
                        sh """
                            # Test SSH connection to the Bastion Host
                            ssh -o StrictHostKeyChecking=no -i \${BASTION_PRIVATE_KEY} \${BASTION_USER}@\${BASTION_HOST} 'echo "SSH connection successful to Bastion"'
                        """
                    }
                }
            }
        }

       stage('Deploy to Bastion and then EC2') {
            steps {
                withCredentials([
                    file(credentialsId: 'bastion-private-key', variable: 'BASTION_PRIVATE_KEY'),
                    file(credentialsId: 'frontend-key', variable: 'FRONTEND_KEY')
                ]) {
                    script {
                        // Start the SSH agent and add the bastion key
                        sh '''
                            eval $(ssh-agent -s)
                            ssh-add ${BASTION_PRIVATE_KEY}
                            ssh-add \$FRONTEND_KEY

                        '''
                        
                        // SCP files from Jenkins to Bastion
                        sh """
                            scp -o StrictHostKeyChecking=no -i ${BASTION_PRIVATE_KEY} -r ./frontend/dist/ ${BASTION_USER}@${BASTION_HOST}:/home/ec2-user/.frontend-pipeline/
                        """
                        
                        // Now SSH into the Bastion, and SCP the files to the EC2 instance
                        sh """
                            ssh -o StrictHostKeyChecking=no -i ${BASTION_PRIVATE_KEY} ${BASTION_USER}@${BASTION_HOST} "
                                scp -v -o StrictHostKeyChecking=no -i \$FRONTEND_KEY -r /home/ec2-user/.frontend-pipeline/ \$AWS_FRONTEND:/home/ec2-user/.frontend-pipeline/
                            "
                        """
                    }
                }
            }
        }



    }

    post {
        always {
            cleanWs()
        }
    }
}
